datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  communities    Community[]
  communityUsers CommunityUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Community {
  id             String          @id @default(uuid())
  image          String
  name           String
  state          String
  city           String
  totalMembers   Int             @default(0)
  description    String
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category       String
  tags           String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  communityUsers CommunityUser[]

  @@map("communities")
}

enum CommunityUserStatus {
  APPROVED
  PENDING
}

enum CommunityUserRole {
  ADMIN
  DEFAULT
}

model CommunityUser {
  id          String              @id @default(uuid())
  status      CommunityUserStatus
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        CommunityUserRole
  communityId String
  community   Community           @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("community_users")
}
